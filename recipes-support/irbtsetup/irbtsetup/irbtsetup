#!/bin/sh

NAME=irbtsetup
# pre EP prototype boards
NAV_ID_TI_CODEC_PBOARD=0
NAV_ID_TI_CODEC=1
NAV_ID_MAXIM_CODEC=2
NAV_VERSION_FILE=/opt/irobot/persistent/opt/irobot/data/kvs/product.nav_version

get_nav_board_id() {
    BOARD_INFO=$(/usr/bin/get_proj_mob_pin_det.sh)
    local nav_rev=" "

    for i in $BOARD_INFO
    do
        case $i in
            BOARD_ID=*)
                nav_rev="${i#*=}";
                shift;;
            *)
                shift;;
        esac
    done

    echo "$nav_rev"
}


case "$1" in
    start)
        # pet watchdog before proceeding further to get enough time till
        # robot boots and call stop-watchdog
        if [ -e /dev/watchdog ]; then
            echo -n 'p' > /dev/watchdog
        else
            echo -n "Unable to pet-watchdog, /dev/watchdog not found."
        fi

        # set pins 20,21 to gpio. They are set for uart by default
        mt7688_pinmux set uart2 gpio
        # set MC_RESET_FROM_NAV (gpio 16) high.  mobility expects this pin to be high when nav is active
        gpio -p 16 -s 1 > /dev/null 2>&1
        # set up audio based on nav board ID
        NAV_ID=$(get_nav_board_id)
        if [ "$NAV_ID" = "$NAV_ID_MAXIM_CODEC" ]; then
            /usr/bin/setup_audio.sh -c 1 -s
        elif [[ "$NAV_ID" = "$NAV_ID_TI_CODEC" || "$NAV_ID" = "$NAV_ID_TI_CODEC_PBOARD" ]]; then
            /usr/bin/setup_audio.sh -c 0 -s
        else
            echo "unknown nav ID, will still set up TI codec driver"
            /usr/bin/setup_audio.sh -c 0 -s
        fi
        # save nav board id to the KVS if file does not exist
        if [ ! -f $NAV_VERSION_FILE ]; then
            echo -ne $NAV_ID > $NAV_VERSION_FILE
        fi
        ifdown usb0 > /dev/null 2>&1;
        ifdown eth0 > /dev/null 2>&1;
        # handle the certs/crypto partition
        /usr/bin/certsparser.sh
        # increment the boot counter
        provision --incrbootcount > /dev/null 2>&1
        # ensure that eth0 is using the latest interface file
        ifup eth0 > /dev/null 2>&1;
        ifup usb0 > /dev/null 2>&1;
        # allow non root users to run dmesg
        echo 0 > /proc/sys/kernel/dmesg_restrict
        dmesg -n 3
        # allow applications with setcap set to generate coredumps for
        # non root users
        echo 1 >/proc/sys/fs/suid_dumpable
        # obtain TSK fingerprint from dmesg and save to file
        # This will have to change if 
        # meta-mediatek-mt7688/recipes-initfamfs/initscripts/files/fingerprint changes.
        dmesg | awk -F: '/TSK Fingerprint/ {print $2}' > /var/run/tsk-fingerprint
        ;;
    stop)
        echo -n "stopping $NAME... "
        echo "done."
        ;;
    restart)
        echo "restarting $NAME... "
        $0 stop
        $0 start
        echo "done."
        ;;
    reload)
        echo -n "reloading $NAME... "
        echo "done."
        ;;
    *)
        echo "Usage: $0 {start|stop|restart|reload}"
        exit 1
        ;;
esac

exit 0
